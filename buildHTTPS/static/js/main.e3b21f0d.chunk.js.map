{"version":3,"sources":["assets/images/icons/warning.svg","services/api.js","components/PageHeader/index.js","components/Input/index.js","components/Textarea/index.js","pages/RetrabForm/index.js","routes.js","App.js","index.js"],"names":["module","exports","api","axios","create","baseURL","process","PageHeader","props","className","title","children","Input","name","label","rest","htmlFor","type","id","Textarea","RetrabForm","useState","cod_turno","setCod_turno","cod_turnoErr","setCod_turnoErr","cod_centro","setCod_centro","cod_centroErr","setCod_centroErr","cod_barras","setCod_barras","cod_barrasErr","setCod_barrasErr","cod_barrasInfo","setCod_barrasInfo","processo","setProcesso","processoId","setProcessoId","processoErr","setProcessoErr","etapa","setEtapa","etapaId","setEtapaId","etapaErr","setEtapaErr","reparo","setReparo","reparoId","setReparoId","reparoErr","setReparoErr","causa","setCausa","causaId","setCausaId","causaErr","setCausaErr","motivo","setMotivo","motivoErr","setMotivoErr","quantidade","setQuantidade","observacao","setObservacao","validaCentro","val","a","get","apiValidaCentro","data","map","document","getElementById","apiValidaCodBarras","codbarrasIsOk","cod_barrasMessage","apiValidaProcesso","processoIsOk","console","log","apiValidaEtapa","etapaIsOk","apiValidaReparo","reparoIsOk","apiValidaCausa","causaIsOk","apiValidaMotivo","motivoIsOk","e","preventDefault","alert","post","grava","onSubmit","autocomplete","required","value","onChange","target","onBlur","src","warningIcon","alt","Routes","path","component","exact","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e3b21f0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/warning.6dfaa2f9.svg\";","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    //baseURL: 'http://172.31.0.41:3333/api'\r\n    baseURL: `http://${process.env.REACT_APP_IP_API}:${process.env.REACT_APP_PORTA_API}/api`\r\n});\r\n\r\nexport default api;","import React from 'react';\r\n\r\nimport './styles.css';\r\n\r\nconst PageHeader = (props) => {\r\n    return (\r\n        <header className=\"page-header\">\r\n            <div className=\"header-content\">\r\n                <strong>{props.title}</strong>\r\n                {props.children}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageHeader\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Input = ({ name, label, ...rest }) => {\r\n    return (\r\n        <div className=\"input-block\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input type=\"text\" id={name} {...rest} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './styles.css';\r\n\r\nconst Textarea = ({ name, label, ...rest }) => {\r\n    return (\r\n        <div className=\"textarea-block\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <textarea id={name} {...rest} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Textarea;","import React, { useState } from 'react';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport PageHeader from '../../components/PageHeader';\r\nimport Input from '../../components/Input';\r\nimport Textarea from '../../components/Textarea';\r\nimport warningIcon from '../../assets/images/icons/warning.svg';\r\n\r\nimport './styles.css';\r\n\r\nfunction RetrabForm() {\r\n    const [cod_turno, setCod_turno] = useState('');\r\n    const [cod_turnoErr, setCod_turnoErr] = useState('');\r\n\r\n    const [cod_centro, setCod_centro] = useState('');\r\n    const [cod_centroErr, setCod_centroErr] = useState('');\r\n\r\n    const [cod_barras, setCod_barras] = useState('');\r\n    const [cod_barrasErr, setCod_barrasErr] = useState('');\r\n    const [cod_barrasInfo, setCod_barrasInfo] = useState('');\r\n\r\n    const [processo, setProcesso] = useState('');\r\n    const [processoId, setProcessoId] = useState('');\r\n    const [processoErr, setProcessoErr] = useState('');\r\n\r\n    const [etapa, setEtapa] = useState('');\r\n    const [etapaId, setEtapaId] = useState('');\r\n    const [etapaErr, setEtapaErr] = useState('');\r\n\r\n    const [reparo, setReparo] = useState('');\r\n    const [reparoId, setReparoId] = useState('');\r\n    const [reparoErr, setReparoErr] = useState('');\r\n\r\n    const [causa, setCausa] = useState('');\r\n    const [causaId, setCausaId] = useState('');\r\n    const [causaErr, setCausaErr] = useState('');\r\n\r\n    const [motivo, setMotivo] = useState('');\r\n    const [motivoErr, setMotivoErr] = useState('');\r\n\r\n    const [quantidade, setQuantidade] = useState('');\r\n\r\n    const [observacao, setObservacao] = useState('');\r\n\r\n    const validaCentro = (val) => {\r\n        if (val === '212')\r\n            return true\r\n        else\r\n            return false\r\n\r\n    }\r\n\r\n    async function handleValidaTurno() {\r\n        if (cod_turno === 'turno1' || cod_turno === 'turno2' || cod_turno === 'TURNO1' || cod_turno === 'TURNO2')\r\n            setCod_turnoErr('')\r\n        else\r\n            setCod_turnoErr('Turno inválido')\r\n    }\r\n\r\n    async function handleValidaCodCentro() {\r\n        if (cod_centro) {\r\n            const apiValidaCentro = await api.get(`/consulta_centro/${cod_centro}`);\r\n            const centroIsOk = apiValidaCentro.data.map(rest => rest['COD_RED']);\r\n            if (centroIsOk[0] > 0) {\r\n                setCod_centroErr('')\r\n                setCod_barras('')\r\n                setCod_barrasErr('')\r\n                setCod_barrasInfo('')\r\n                if (validaCentro(cod_centro)) {\r\n                    document.getElementById('cod_barras').type = 'number';\r\n                    setQuantidade(1);\r\n                } else {\r\n                    document.getElementById('cod_barras').type = 'text';\r\n                    setQuantidade('');\r\n                }\r\n            } else {\r\n                setCod_centroErr('Centro de custo invalido.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleValidaCodBarra() {\r\n        if (validaCentro(cod_centro))\r\n            if (cod_barras) {\r\n                const apiValidaCodBarras = await api.get(`/consulta_codbarras/${cod_barras}`);\r\n                const codbarrasIsOk = apiValidaCodBarras.data[0].map(rest => rest['ID']);\r\n                const cod_barrasMessage = apiValidaCodBarras.data[1].map(rest => rest['message']);\r\n                //console.log(cod_barrasMessage[0])\r\n                if (codbarrasIsOk[0] > 0) {\r\n                    setCod_barrasErr()\r\n                } else {\r\n                    setCod_barrasErr('Código de barras não encontrado.')\r\n                }\r\n\r\n                if (cod_barrasMessage[0]) {\r\n                    setCod_barrasInfo(cod_barrasMessage[0])\r\n                } else {\r\n                    setCod_barrasInfo()\r\n                }\r\n            }\r\n    }\r\n\r\n    async function handleValidaProcesso() {\r\n        if (processo) {\r\n            const apiValidaProcesso = await api.get(`/consulta_processo/${processo}`);\r\n            const processoIsOk = apiValidaProcesso.data.map(rest => rest['ID']);\r\n            if (processoIsOk[0] > 0) {\r\n                console.log(processoIsOk[0])\r\n                setProcessoId(processoIsOk[0])\r\n                setProcessoErr('')\r\n            } else {\r\n                setProcessoErr('Processo informado é invalido.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleValidaEtapa() {\r\n        if (etapa) {\r\n            const apiValidaEtapa = await api.get(`/consulta_etapa/${etapa}`);\r\n            const etapaIsOk = apiValidaEtapa.data.map(rest => rest['ID']);\r\n            if (etapaIsOk[0] > 0) {\r\n                console.log(etapaIsOk[0])\r\n                setEtapaId(etapaIsOk[0])\r\n                setEtapaErr('')\r\n            } else {\r\n                setEtapaErr('Etapa informada é invalida.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleValidaReparo() {\r\n        if (reparo) {\r\n            const apiValidaReparo = await api.get(`/consulta_reparo/${reparo}`);\r\n            const reparoIsOk = apiValidaReparo.data.map(rest => rest['ID']);\r\n            if (reparoIsOk[0] > 0) {\r\n                console.log(reparoIsOk[0])\r\n                setReparoId(reparoIsOk[0])\r\n                setReparoErr('')\r\n            } else {\r\n                setReparoErr('Reparo informado é invalido.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleValidaCausa() {\r\n        if (causa) {\r\n            const apiValidaCausa = await api.get(`/consulta_causa/${causa}`);\r\n            const causaIsOk = apiValidaCausa.data.map(rest => rest['ID']);\r\n            if (causaIsOk[0] > 0) {\r\n                console.log(causaIsOk[0])\r\n                setCausaId(causaIsOk[0])\r\n                setCausaErr('')\r\n            } else {\r\n                setCausaErr('Causa informada é invalida.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleValidaMotivo() {\r\n        if (motivo) {\r\n            const apiValidaMotivo = await api.get(`/consulta_motivo/${motivo}`);\r\n            const motivoIsOk = apiValidaMotivo.data.map(rest => rest['ID']);\r\n            if (motivoIsOk[0] > 0) {\r\n                console.log(motivoIsOk[0])\r\n                setMotivoErr('')\r\n            } else {\r\n                setMotivoErr('Motivo informado é invalido.')\r\n            }\r\n        }\r\n    }\r\n\r\n    async function handleCreate(e) {\r\n        e.preventDefault();\r\n        if (cod_turnoErr || cod_centroErr || cod_barrasErr || processoErr || etapaErr || reparoErr || causaErr || motivoErr) {\r\n            alert('Oops, verifique os erros apontados na tela!');\r\n        } else {\r\n            const grava = await api.post('/gravar_retrabalho', {\r\n                cod_turno,\r\n                cod_centro,\r\n                cod_barras,\r\n                processo: processoId,\r\n                etapa: etapaId,\r\n                reparo: reparoId,\r\n                causa: causaId,\r\n                motivo,\r\n                quantidade,\r\n                observacao\r\n            });\r\n            console.log(grava)\r\n            //localStorage.setItem('user', _id);\r\n            setCod_barras('');\r\n            setProcesso('');\r\n            setEtapa('');\r\n            setReparo('');\r\n            setCausa('');\r\n            setMotivo('');\r\n            setCod_barrasInfo('');\r\n            if (!validaCentro(cod_centro)) {\r\n                setQuantidade('');\r\n            }\r\n            setObservacao('');\r\n            alert('Sucesso, Retrabalho registrado!');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-apontretrab-form\" className=\"container\">\r\n            <PageHeader title=\"Apontamento de Retrabalhos\" />\r\n            <main>\r\n                <form onSubmit={handleCreate} autocomplete=\"off\">\r\n                    <fieldset>\r\n                        <div className=\"group\">\r\n                            <div>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    required\r\n                                    name=\"cod_turno\"\r\n                                    label=\"Turno\"\r\n                                    value={cod_turno}\r\n                                    onChange={(e) => { setCod_turno(e.target.value) }}\r\n                                    onBlur={handleValidaTurno} />\r\n                                {cod_turnoErr && <spam>{cod_turnoErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"cod_centro\"\r\n                                    label=\"Centro de custo\"\r\n                                    value={cod_centro}\r\n                                    onChange={(e) => { setCod_centro(e.target.value) }}\r\n                                    onBlur={handleValidaCodCentro} />\r\n                                {cod_centroErr && <spam>{cod_centroErr}</spam>}\r\n                            </div>\r\n                        </div>\r\n                        <Input\r\n                            id=\"cod_barras\"\r\n                            type=\"number\"\r\n                            required\r\n                            name=\"cod_barras\"\r\n                            label=\"Código de Barras\"\r\n                            value={cod_barras}\r\n                            onChange={(e) => { setCod_barras(e.target.value) }}\r\n                            onBlur={handleValidaCodBarra} />\r\n                        {cod_barrasErr && <spam>{cod_barrasErr}</spam>}\r\n                        {cod_barrasInfo && <spam>{cod_barrasInfo}</spam>}\r\n                        <div className=\"group\">\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"processo\"\r\n                                    label=\"Processo - Maquina\"\r\n                                    value={processo}\r\n                                    onChange={(e) => { setProcesso(e.target.value) }}\r\n                                    onBlur={handleValidaProcesso} />\r\n                                {processoErr && <spam>{processoErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"etapa\"\r\n                                    label=\"Etapa\"\r\n                                    value={etapa}\r\n                                    onChange={(e) => { setEtapa(e.target.value) }}\r\n                                    onBlur={handleValidaEtapa} />\r\n                                {etapaErr && <spam>{etapaErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"reparo\"\r\n                                    label=\"Reparo\"\r\n                                    value={reparo}\r\n                                    onChange={(e) => { setReparo(e.target.value) }}\r\n                                    onBlur={handleValidaReparo} />\r\n                                {reparoErr && <spam>{reparoErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"causa\"\r\n                                    label=\"Causa\"\r\n                                    value={causa}\r\n                                    onChange={(e) => { setCausa(e.target.value) }}\r\n                                    onBlur={handleValidaCausa} />\r\n                                {causaErr && <spam>{causaErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"motivo\"\r\n                                    label=\"Motivo\"\r\n                                    value={motivo}\r\n                                    onChange={(e) => { setMotivo(e.target.value) }}\r\n                                    onBlur={handleValidaMotivo} />\r\n                                {motivoErr && <spam>{motivoErr}</spam>}\r\n                            </div>\r\n                            <div>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    required\r\n                                    name=\"quantidade\"\r\n                                    label=\"Quantidade\"\r\n                                    value={quantidade}\r\n                                    onChange={(e) => { setQuantidade(e.target.value) }} />\r\n                            </div>\r\n                        </div>\r\n                        <Textarea\r\n                            type=\"number\"\r\n                            name=\"observacao\"\r\n                            label=\"Observação\"\r\n                            value={observacao}\r\n                            onChange={(e) => { setObservacao(e.target.value) }} />\r\n\r\n                    </fieldset>\r\n                    <footer>\r\n                        <p>\r\n                            <img src={warningIcon} alt=\"Aviso importante\" />\r\n                            Preencha todos os campos do formulário!\r\n                        </p>\r\n                        <button type=\"submit\">Registrar o retrabalho agora</button>\r\n                    </footer>\r\n                </form>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RetrabForm;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport RetrabForm from './pages/RetrabForm';\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route\r\n                    path=\"/\"\r\n                    component={RetrabForm}\r\n                    exact\r\n                />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}","import React from 'react';\nimport './assets/styles/global.css';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}